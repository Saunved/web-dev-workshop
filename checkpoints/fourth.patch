diff --git a/frontend/src/components/Tweet/ComposeTweet.jsx b/frontend/src/components/Tweet/ComposeTweet.jsx
index 2030936..393d865 100644
--- a/frontend/src/components/Tweet/ComposeTweet.jsx
+++ b/frontend/src/components/Tweet/ComposeTweet.jsx
@@ -19,9 +19,7 @@ export default function ComposeTweet({ handle }) {
   const onTextAreaChange = (e) => {
     const input = e.target.value;
 
-    if (input.length > TEXT_CHAR_LIMIT) {
-      return;
-    }
+    // Task 2D: Restrict the end user from writing any more characters when they reach the maximum number of characters allowed.
 
     setTextArea(input);
   };
@@ -31,20 +29,14 @@ export default function ComposeTweet({ handle }) {
   }, []);
 
   const getCharLimitIndicatorColor = () => {
-    if (textArea.length > 200 && textArea.length < TEXT_CHAR_LIMIT) {
-      return "text-yellow-600";
-    }
-
-    if (textArea.length >= TEXT_CHAR_LIMIT) {
-      return "text-red-600";
-    }
+    // Task 2C : Make charachter limit indicator to red when user reaches the limit?
   };
 
   const onTweetSubmit = (e) => {
     e.preventDefault();
 
     fetch(tweetRoute, {
-      method: "POST",
+      // Task 3A : What HTTP request method do you think is most appropriate to use here
       credentials: "include",
       headers: {
         "Content-Type": "application/json",
@@ -56,17 +48,11 @@ export default function ComposeTweet({ handle }) {
       .then((response) => {
         if (response.ok) {
           response.json().then((body) => {
-            // @TODO: Redirect the user to the single tweet view
-            router.push(`/${user.handle}/status/${body.data.tweet.id}`);
+            // Task 3B - Redirect the user to the single tweet view
           });
         } else {
-          // If create tweet fails
           response.json().then((body) => {
-            if (body?.message) {
-              toast.error(body.message);
-            } else {
-              toast.error(uiText.somethingWentWrong);
-            }
+            // Task 3B - Show toast error message in case of create tweet fails
           });
         }
       })
@@ -82,24 +68,25 @@ export default function ComposeTweet({ handle }) {
           <ProfilePicture handle={handle} />
         </div>
         <form onSubmit={onTweetSubmit} className="w-full">
-          <ReactTextareaAutosize
-            minRows={1}
-            maxRows={10}
-            value={textArea}
-            onChange={onTextAreaChange}
-            placeholder="What's happening?"
-            className="w-full rounded text-xl px-4 py-2 border-gray-600 resize-none outline-none"
-          />
+          {/* 
+              Task 1A: Create auto-resizable text input fields.
+              Hint: You can also utilize an external library for this task.
+          */}
           <div className="flex justify-end mt-4 items-center gap-4">
-            <div className={textArea.length ? "block" : "hidden"}>
+            {/* 
+              Task 2B: Show or hide the character limit indicator based on the tweet content. 
+              
+              Hide the indicator when the tweet is empty; otherwise, show the indicator.            
+            */}
+            <div>
               <span className={getCharLimitIndicatorColor()}>
                 {textArea.length}
               </span>{" "}
               / {TEXT_CHAR_LIMIT}
             </div>
             <button
-              type="submit"
-              disabled={!textArea}
+              // Task 1B : What would be type of the button?
+              // Task 2A : Disble the button when tweet content is empty
               className="px-8 border rounded-full py-2 bg-blue-600 text-white flex justify-center items-center gap-2 disabled:opacity-60"
             >
               Woof
