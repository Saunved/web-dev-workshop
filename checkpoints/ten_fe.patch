diff --git a/frontend/src/components/Tweet/TweetActions.jsx b/frontend/src/components/Tweet/TweetActions.jsx
index 129382d..a9942cf 100644
--- a/frontend/src/components/Tweet/TweetActions.jsx
+++ b/frontend/src/components/Tweet/TweetActions.jsx
@@ -9,8 +9,15 @@ export default function TweetActions({ tweet }) {
   const uiText = strings.EN.ERROR;
   const [isLiked, setIsLiked] = useState(tweet.isLikedByUser);
   const [isRetweeted, setIsRetweeted] = useState(tweet.isRetweetedByUser);
-  const [likeCount, setLikeCount] = useState(tweet.likeCount);
   const [retweetCount, setRetweetCount] = useState(tweet.retweetCount);
+  /**
+   * Checkpoint 10, Task 1:
+   */
+  const [/* Use appropriate value and setter from the store for like "count" */] = useState(tweet.likeCount);
+  /*
+   * Checkpoint 10 Task 1:
+   */
+  const [/* Use the appropriate value & setter from the store for like state */] = useState(false);  
   const [disableLikeButton, setDisableLikeButton] = useState(false);
   const [disableRetweetButton, setDisableRetweetButton] = useState(false);
   const [user, setUser] = useState({});
@@ -89,17 +96,28 @@ export default function TweetActions({ tweet }) {
   const likeTweet = async () => {
     setDisableLikeButton(true);
     fetch(`${BASE_URL}/tweet/like/${tweet.id}`, {
-      method: "POST",
+      /**
+       * Checkpoint 10 Task 3:
+       * @TODO: Use the correct HTTP method
+       */
+      method: "...",
       credentials: "include",
       headers: {
-        "Content-Type": "application/json",
+      /**
+       * Checkpoint 10 Task 3:
+       * @TODO: Use the correct content type
+       */
+      "Content-Type": "@TODO: Use the correct content type",
       },
     })
       .then((response) => {
         if (response.ok) {
           // Reflect the like or toggled like
           setIsLiked(true);
-          setLikeCount(likeCount + 1);
+          /**
+           * Checkpoint 10 Task 3:
+           */
+          setLikeCount( /* Update the like count in state */);
         } else {
           response.json().then((body) => {
             if (body?.data?.message) {
@@ -120,7 +138,11 @@ export default function TweetActions({ tweet }) {
    * Likes or unlikes a tweet depending on the state
    */
   const unlikeTweet = async () => {
-    setDisableLikeButton(true);
+    /**
+     * Checkpoint 10 Task 4:
+     * @TODO: Enable or disable the like button correctly before we unlike the tweet
+     */
+
     fetch(`${BASE_URL}/tweet/unlike/${tweet.id}`, {
       method: "POST",
       credentials: "include",
@@ -142,7 +164,10 @@ export default function TweetActions({ tweet }) {
             }
           });
         }
-        setDisableLikeButton(false);
+        /**
+         * Checkpoint 10 Task 4:
+         * @TODO: Enable/disable the button correctly
+         */
       })
       .catch((error) => {
         console.error("Error liking tweet", error);
@@ -162,19 +187,38 @@ export default function TweetActions({ tweet }) {
         />
         <span className="text-sm">{retweetCount || 0}</span>
       </button>
+        {/*
+          * Checkpoint 10 Task 4:
+          * @TODO: In the "button", set the disabled prop correctly based on
+          * already liked or not
+        */}
+        {/*
+          * Checkpoint 10 Task 3:
+          * @TODO: In the "button", handle onClick based on whether the
+          * tweet is already liked or not
+        */}      
       <button
-        disabled={disableLikeButton}
-        onClick={isLiked ? unlikeTweet : likeTweet}
         className="flex gap-2 items-center"
       >
+      {/*
+        * Checkpoint 10 Task 2:
+        * @TODO: In the Heart's component props, set the "weight" based on value of like to be "fill" or "regular"
+      */}
+      {/* Checkpoint 10 Task 2:
+        @TODO: Also set the classes based on value of "like" ("text-red-600" or "")
+      */}
         <Heart
-          weight={isLiked ? "fill" : "regular"}
           size={20}
           className={`text-gray-700 hover:cursor-pointer ${
             isLiked ? "text-red-600" : ""
           }`}
         />
-        <span className="text-sm">{likeCount || 0}</span>
+        {/*
+          * Checkpoint 10 Task 2:
+          * @TODO: Show the number of likes text based on value
+          * of like in the empty braces: {}
+        */}        
+        <span className="text-sm">{}</span>
       </button>
     </div>
   );
